name: Release_Build

env:
  ProductName: NBTerminal
  UPLOAD_TMP_DIR: ./build/upload_tmp_dir

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      UPLOAD_URL: ${{ steps.stepCreateRelease.outputs.upload_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get latest tag
        run: |
          echo "LATEST_TAG=$(git tag | grep -v '^latest$' | sort -V | tail -n1)" >> $GITHUB_ENV

      - name: Bump version and push tag
        id: tag-version
        uses: mathieudutour/github-tag-action@v6.2
        with:
          tag_prefix: ""
          custom_tag: ${{ env.LATEST_TAG }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Step GitHub release
        id: stepCreateRelease
        uses: ncipollo/release-action@v1
        with:
          skipIfReleaseExists: 'true'
          tag: ${{ env.LATEST_TAG }}
          name: ${{ env.LATEST_TAG }}

  build:
    needs: release
    strategy:
      matrix:
        os: [ macos-latest, windows-latest]
        arch: [ amd64, arm64 ]
        exclude:
          - os: windows-latest
            arch: arm64
          - os: macos-latest
            arch: arm64
          - os: ubuntu-latest
            arch: arm64
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '>=1.18.0'

      - name: Install Windows MSYS2 using choco
        if: matrix.os == 'windows-latest'
        run: choco install msys2 --params "/InstallDir=C:\msys64"

      - name: Setup Windows MSYS2 and install dependencies
        if: matrix.os == 'windows-latest'
        run: |
          C:\msys64\usr\bin\bash -lc "pacman -Sy --noconfirm && pacman -S --noconfirm base-devel mingw-w64-x86_64-toolchain mingw-w64-x86_64-cmake mingw-w64-x86_64-openssl"
          echo "C:\\msys64\\mingw64\\bin" >> $GITHUB_ENV
          echo "C:\\msys64\\usr\\bin" >> $GITHUB_ENV

      - name: Setup Mesa
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          mkdir -p ./mesa
          curl -L -o ./mesa/mesa3d-24.1.2-release-msvc.7z https://github.com/pal1000/mesa-dist-win/releases/download/24.1.2/mesa3d-24.1.2-release-msvc.7z
          
          cd ./mesa
          7z x mesa3d-24.1.2-release-msvc.7z
          
          if [ -f /c/Windows/System32/opengl32.dll ]; then
            mv /c/Windows/System32/opengl32.dll /c/Windows/System32/opengl32.dll.bak
          fi
          if [ -f /c/Windows/System32/libglapi.dll ]; then
            mv /c/Windows/System32/libglapi.dll /c/Windows/System32/libglapi.dll.bak
          fi
          
          ln -s $(pwd)/x64/opengl32.dll /c/Windows/System32/opengl32.dll
          ln -s $(pwd)/x64/libglapi.dll /c/Windows/System32/libglapi.dll

      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y libpango1.0-dev libx11-dev libxext-dev libxft-dev libxinerama-dev libxcursor-dev libxrender-dev libxfixes-dev libpng-dev libgl1-mesa-dev libglu1-mesa-dev

      - name: Install MacOS dependencies
        if: matrix.os == 'macos-latest'
        run: brew install create-dmg

      - name: Build Windows Project
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          rm -rf ${{ env.UPLOAD_TMP_DIR }}/*
          bash ./build.sh release
          bash ./build.sh test

      - name: Build MacOS Project
        if: matrix.os == 'macos-latest'
        run: |
          export PATH="/mingw64/bin:$PATH"
          rm -rf ${{ env.UPLOAD_TMP_DIR }}/*
          bash ./build.sh release
          bash ./build.sh test

      - name: Upload windows binaries to release
        id: upload_file_to_release_windows
        if: matrix.os == 'windows-latest'
        uses: george012/upload_github_release_assets_action@latest
        with:
          path: ${{ env.UPLOAD_TMP_DIR }}/*.zip

      - name: Upload binaries to release
        id: upload_file_to_release_mac
        if: matrix.os == 'macos-latest'
        uses: george012/upload_github_release_assets_action@latest
        with:
          path: ${{ env.UPLOAD_TMP_DIR }}/*.dmg

#      - name: Upload to Cloudflare
#        uses: ryand56/r2-upload-action@develop
#        with:
#          r2-account-id: ${{ secrets.CF_R2_ACCOUNT_ID }}
#          r2-access-key-id: ${{ secrets.CF_R2_AK }}
#          r2-secret-access-key: ${{ secrets.CF_R2_SK }}
#          r2-bucket: pub-package-asia
#          source-dir: ${{ env.UPLOAD_TMP_DIR }}
#          destination-dir: ${{ env.ProductName }}/
#          multipart-size: 300

  remove_old_release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Install GitHub CLI
        run: |
          type -p curl >/dev/null || sudo apt install curl -y
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh -y

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set APP_VERSION env
        run: |
          APP_VERSION=$(echo ${GITHUB_REF} | rev | cut -d'/' -f 1 | rev)

          function get_pre_del_tag {
              local v_str=$1
              baseStr=$(echo $v_str | cut -d'.' -f1)
              base=${baseStr//v/}
              major=$(echo $v_str | cut -d'.' -f2)
              minor=$(echo $v_str | cut -d'.' -f3)

              if ((minor>0)); then
                  minor=$((minor-1))
              else
                  minor=999
                  if ((major>0)); then
                      major=$((major-1))
                  else
                      major=999
                      if ((base>0)); then
                          base=$((base-1))
                      else
                          echo "Error: Version cannot be decremented."
                          exit 1
                      fi
                  fi
              fi

              pre_v_no="v${base}.${major}.${minor}"
              echo $pre_v_no
          }

          APP_OLD_VERSION=$(get_pre_del_tag $(get_pre_del_tag $APP_VERSION))

          echo "Old version to remove: ${APP_OLD_VERSION}"
          echo "APP_OLD_VERSION=${APP_OLD_VERSION}" >> ${GITHUB_ENV}

      - name: Remove Old Release
        run: |
          gh release delete ${{ env.APP_OLD_VERSION }} -y
          git push origin --delete ${{ env.APP_OLD_VERSION }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
